<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="17.12">
<procedure name="main">
<interface/>
<body>
<c>* </c>
<c>* This example explains how to use the hand eye calibration for the case where</c>
<c>* the camera is stationary with respect to the robot and the calibration</c>
<c>* object is attached to the robot arm.</c>
<c>* In this case, the goal of the hand eye calibration</c>
<c>* is to determine two unknown poses:</c>
<c>* - the pose of the robot base in the coordinate system</c>
<c>*   of the camera (BaseInCamPose).</c>
<c>* - the pose of the calibration object in the coordinate system of the</c>
<c>*   tool (CalObjInToolPose)</c>
<c>* Theoretically, as input the method needs at least 3 poses of the</c>
<c>* calibration object in the camera coordinate system and the corresponding</c>
<c>* poses of the robot tool in the coordinate system of the</c>
<c>* robot base. However it is recommended</c>
<c>* to use at least 10 Poses.</c>
<c>* The poses of the calibration object are obtained from images of the</c>
<c>* calibration object recorded with the stationary camera.</c>
<c>* The calibration object is moved by the robot with respect to the camera.</c>
<c>* To obtain good calibration results, it its essential to position</c>
<c>* the calibration object with respect to the camera so that the object appears</c>
<c>* tilted in the image.</c>
<c>* After the hand eye calibration, the computed transformations are</c>
<c>* extracted and used to compute the pose of the calibration object in the</c>
<c>* camera coordinate system.</c>
<l>dev_update_off ()</l>
<c>* Directories with calibration images and data files</c>
<l>ImageNameStart := 'img/image_'</l>
<l>DataNameStart := ''</l>
<l>NumImages := 6</l>
<c>* Read image</c>
<l>read_image (Image, ImageNameStart + '00')</l>
<l>get_image_size (Image, Width, Height)</l>
<c>* Open window</c>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>dev_set_line_width (2)</l>
<l>dev_set_draw ('margin')</l>
<l>dev_display (Image)</l>
<c>* Set font</c>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<c>* Load the calibration plate description file.</c>
<c>* Make sure that the file is in the current directory,</c>
<c>* the HALCONROOT/calib directory, or use an absolut path</c>
<l>CalTabFile := 'HC-IW.descr'</l>
<c>* Read the initial values for the internal camera parameters</c>
<l>read_cam_par (DataNameStart + 'd435i-HC80.dat', StartCamParam)</l>
<c>* Create the calibration model for the hand eye calibration</c>
<l>create_calib_data ('hand_eye_stationary_cam', 1, 1, CalibDataID)</l>
<l>set_calib_data_cam_param (CalibDataID, 0, [], StartCamParam)</l>
<l>set_calib_data_calib_object (CalibDataID, 0, CalTabFile)</l>
<l>set_calib_data (CalibDataID, 'model', 'general', 'optimization_method', 'nonlinear')</l>
<l>disp_message (WindowHandle, 'The calibration data model was created', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* Start the loop over the calibration images</c>
<l>for I := 0 to NumImages - 1 by 1</l>
<l>    read_image (Image, ImageNameStart + I$'02d')</l>
<c>    * Search for the calibration plate, extract the marks and the</c>
<c>    * pose of it, and store the results in the calibration data model of the</c>
<c>    * hand-eye calibration</c>
<l>    find_calib_object (Image, CalibDataID, 0, 0, I, [], [])</l>
<l>    get_calib_data_observ_contours (Caltab, CalibDataID, 'caltab', 0, 0, I)</l>
<l>    get_calib_data_observ_points (CalibDataID, 0, 0, I, RCoord, CCoord, Index, CalObjInCamPose)</l>
<c>    * Visualize the extracted calibration marks and the estimated pose (coordinate system)</c>
<l>    dev_set_color ('green')</l>
<l>    dev_display (Image)</l>
<l>    dev_display (Caltab)</l>
<l>    dev_set_color ('yellow')</l>
<l>    disp_cross (WindowHandle, RCoord, CCoord, 6, 0)</l>
<l>    dev_set_colored (3)</l>
<l>    disp_3d_coord_system (WindowHandle, StartCamParam, CalObjInCamPose, 0.01)</l>
<c>    * Read pose of tool in robot base coordinates (ToolInBasePose)</c>
<l>    read_pose (DataNameStart + 'campose' + I$'02d' + '.dat', ToolInBasePose)</l>
<c>    * Set the pose tool in robot base coordinates in the calibration data model</c>
<l>    set_calib_data (CalibDataID, 'tool', I, 'tool_in_base_pose', ToolInBasePose)</l>
<c>    * Uncomment to inspect visualization</c>
<l>*     disp_message (WindowHandle, 'Extracting data from calibration image ' + (I + 1) + ' of ' + NumImages, 'window', 12, 12, 'black', 'true')</l>
<l>*     disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>*     stop ()</l>
<l>endfor</l>
<l>disp_message (WindowHandle, 'All relevant data has been set in the calibration data model', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* Check the input poses for consistency</c>
<l>check_hand_eye_calibration_input_poses (CalibDataID, 0.05, 0.005, Warnings)</l>
<l>if (|Warnings| != 0)</l>
<c>    * There were problem detected in the input poses. Inspect Warnings and</c>
<c>    * remove erroneous poses with remove_calib_data and remove_calib_data_observ.</c>
<l>    dev_inspect_ctrl (Warnings)</l>
<l>    stop ()</l>
<l>endif</l>
<c>* Perform hand-eye calibration</c>
<c>* Internally before performing the hand-eye calibration the cameras are calibrated</c>
<c>* and the calibrated poses of the calibration object in the camera are used.</c>
<l>dev_display (Image)</l>
<l>disp_message (WindowHandle, 'Performing the hand-eye calibration', 'window', 12, 12, 'black', 'true')</l>
<l>calibrate_hand_eye (CalibDataID, Errors)</l>
<c>* Query the error of the camera calibration</c>
<l>get_calib_data (CalibDataID, 'model', 'general', 'camera_calib_error', CamCalibError)</l>
<c>* Query the camera parameters and the poses</c>
<l>get_calib_data (CalibDataID, 'camera', 0, 'params', CamParam)</l>
<c>* Get poses computed by the hand eye calibration</c>
<l>get_calib_data (CalibDataID, 'camera', 0, 'base_in_cam_pose', BaseInCamPose)</l>
<l>get_calib_data (CalibDataID, 'calib_obj', 0, 'obj_in_tool_pose', ObjInToolPose)</l>
<l>try</l>
<c>    * Store the camera parameters to file</c>
<l>    write_cam_par (CamParam, DataNameStart + 'final_campar.dat')</l>
<c>    * Save the hand eye calibration results to file</c>
<l>    write_pose (BaseInCamPose, DataNameStart + 'final_pose_cam_base.dat')</l>
<l>    write_pose (ObjInToolPose, DataNameStart + 'final_pose_tool_calplate.dat')</l>
<l>catch (Exception)</l>
<c>    * Do nothing</c>
<l>endtry</l>
<c>* Display calibration errors of the hand-eye calibration</c>
<l>disp_results (WindowHandle, CamCalibError, Errors)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* For the given camera, get the corresponding pose indices and calibration object indices</c>
<l>query_calib_data_observ_indices (CalibDataID, 'camera', 0, CalibObjIdx, PoseIds)</l>
<c>* Compute the pose of the calibration object in the camera coordinate</c>
<c>* system via calibrated poses and the ToolInBasePose and visualize it.</c>
<l>for I := 0 to NumImages - 1 by 1</l>
<l>    read_image (Image, ImageNameStart + I$'02d')</l>
<c>    * Obtain the pose of the tool in robot base coordinates used in the calibration.</c>
<c>    * The index corresponds to the index of the pose of the observation object.</c>
<l>    get_calib_data (CalibDataID, 'tool', PoseIds[I], 'tool_in_base_pose', ToolInBasePose)</l>
<l>    dev_display (Image)</l>
<c>    * Compute the pose of the calibration plate with respect to the camera</c>
<c>    * and visualize it</c>
<l>    calc_calplate_pose_stationarycam (ObjInToolPose, BaseInCamPose, ToolInBasePose, CalObjInCamPose)</l>
<l>    dev_set_colored (3)</l>
<l>    disp_3d_coord_system (WindowHandle, CamParam, CalObjInCamPose, 0.01)</l>
<l>    Message := 'Using the calibration results to display the'</l>
<l>    Message[1] := 'coordinate system in image ' + (I + 1) + ' of ' + NumImages</l>
<l>    disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<l>    if (I &lt; NumImages - 1)</l>
<l>        disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endfor</l>
<c>* Clear the data model</c>
<l>clear_calib_data (CalibDataID)</l>
<c>* </c>
<c>* After the hand-eye calibration, the computed pose</c>
<c>* BaseInCamPose can be used in robotic grasping applications.</c>
<c>* To grasp an object with the robot, typically, its pose</c>
<c>* with respect to the camera is determined (which</c>
<c>* is simulated here by setting the object's pose to the</c>
<c>* pose of the calibration object)</c>
<l>ObjInCamPose := CalObjInCamPose</l>
<c>* If the tool coordinate system is placed at the gripper</c>
<c>* and an object detected at ObjInCamPose shall be grasped,</c>
<c>* the pose of the detected object relative</c>
<c>* to the robot base coordinate system has to be computed.</c>
<l>pose_invert (BaseInCamPose, CamInBasePose)</l>
<l>pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="disp_results">
<interface>
<ic>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="CamCalibError" base_type="ctrl" dimension="0"/>
<par name="Errors" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>dev_clear_window ()</l>
<l>Message := 'Quality of the results:'</l>
<l>disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<l>Message := 'Error of the camera calibration:      ' + CamCalibError$'6.4f' + ' pixel'</l>
<l>disp_message (WindowHandle, Message, 'window', 52, 12, 'black', 'true')</l>
<l>Message := 'Errors of the hand eye calibration:'</l>
<l>disp_message (WindowHandle, Message, 'window', 92, 12, 'black', 'true')</l>
<l>DispErrors := []</l>
<l>DispErrors := [DispErrors,'                     |   RMS    |  Maximum |']</l>
<l>DispErrors := [DispErrors,'|--------------------+----------+----------|']</l>
<l>DispErrors := [DispErrors,'| Translational part | ' + (Errors[0] * 1e3)$'5.3f' + ' mm | ' + (Errors[2] * 1e3)$'5.3f' + ' mm |']</l>
<l>DispErrors := [DispErrors,'| Rotational part    | ' + Errors[1]$'5.3f' + ' °  | ' + Errors[3]$'5.3f' + ' °  |']</l>
<l>disp_message (WindowHandle, DispErrors, 'window', 132, 40, 'black', 'true')</l>
<l>return ()</l>
</body>
<docu id="disp_results">
<parameters>
<parameter id="CamCalibError"/>
<parameter id="Errors"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="calc_calplate_pose_stationarycam">
<interface>
<ic>
<par name="CalObjInToolPose" base_type="ctrl" dimension="0"/>
<par name="BaseInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="CalObjInCamPose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* CalObjInCamPose = cam_H_calplate = cam_H_base * base_H_tool * tool_H_calplate</c>
<c>*                                  = BaseInCamPose*ToolInBasePose*CalObjInToolPose</c>
<l>pose_compose (BaseInCamPose, ToolInBasePose, ToolInCamPose)</l>
<l>pose_compose (ToolInCamPose, CalObjInToolPose, CalObjInCamPose)</l>
<l>return ()</l>
</body>
<docu id="calc_calplate_pose_stationarycam">
<short lang="en_US">compute cam_H_calplate from hand-eye calibration results</short>
<short lang="zh_CN">compute cam_H_calplate from hand-eye calibration results</short>
<parameters>
<parameter id="BaseInCamPose"/>
<parameter id="CalObjInCamPose"/>
<parameter id="CalObjInToolPose"/>
<parameter id="ToolInBasePose"/>
</parameters>
</docu>
</procedure>
</hdevelop>
